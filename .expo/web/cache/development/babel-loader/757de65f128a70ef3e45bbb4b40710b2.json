{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { useState, useCallback } from 'react';\nexport var useStretchyAnimation = function useStretchyAnimation(_listener) {\n  var _useState = useState(new Animated.Value(1)),\n      _useState2 = _slicedToArray(_useState, 1),\n      animation = _useState2[0];\n\n  var onAnimationEvent = useCallback(Animated.event([{\n    nativeEvent: {\n      contentOffset: {\n        y: animation\n      }\n    }\n  }], {\n    useNativeDriver: true,\n    listener: function listener(_ref) {\n      var contentOffset = _ref.nativeEvent.contentOffset;\n      return _listener && _listener(contentOffset.y);\n    }\n  }), [_listener]);\n  return {\n    animation: animation,\n    onAnimationEvent: onAnimationEvent\n  };\n};","map":{"version":3,"sources":["/home/cyclopz/Desktop/Cyclopz/My Personal Git/React-Native/Pokemon/node_modules/react-native-stretchy/lib/dist/hooks/useStretchyAnimation.js"],"names":["useState","useCallback","useStretchyAnimation","listener","Animated","Value","animation","onAnimationEvent","event","nativeEvent","contentOffset","y","useNativeDriver"],"mappings":";;AACA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,SAAD,EAAc;AAAA,kBAC1BH,QAAQ,CAAC,IAAII,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CADkB;AAAA;AAAA,MACvCC,SADuC;;AAE9C,MAAMC,gBAAgB,GAAGN,WAAW,CAACG,QAAQ,CAACI,KAAT,CAAe,CAChD;AACIC,IAAAA,WAAW,EAAE;AACTC,MAAAA,aAAa,EAAE;AAAEC,QAAAA,CAAC,EAAEL;AAAL;AADN;AADjB,GADgD,CAAf,EAMlC;AACCM,IAAAA,eAAe,EAAE,IADlB;AAECT,IAAAA,QAAQ,EAAE;AAAA,UAAkBO,aAAlB,QAAGD,WAAH,CAAkBC,aAAlB;AAAA,aAAwCP,SAAQ,IAAIA,SAAQ,CAACO,aAAa,CAACC,CAAf,CAA5D;AAAA;AAFX,GANkC,CAAD,EAShC,CAACR,SAAD,CATgC,CAApC;AAUA,SAAO;AAAEG,IAAAA,SAAS,EAATA,SAAF;AAAaC,IAAAA,gBAAgB,EAAhBA;AAAb,GAAP;AACH,CAbM","sourcesContent":["import { Animated, } from 'react-native';\nimport { useState, useCallback } from 'react';\nexport const useStretchyAnimation = (listener) => {\n    const [animation] = useState(new Animated.Value(1));\n    const onAnimationEvent = useCallback(Animated.event([\n        {\n            nativeEvent: {\n                contentOffset: { y: animation },\n            },\n        },\n    ], {\n        useNativeDriver: true,\n        listener: ({ nativeEvent: { contentOffset } }) => listener && listener(contentOffset.y),\n    }), [listener]);\n    return { animation, onAnimationEvent };\n};\n"]},"metadata":{},"sourceType":"module"}