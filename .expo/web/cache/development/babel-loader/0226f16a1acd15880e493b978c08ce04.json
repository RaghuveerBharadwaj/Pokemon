{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useMemo } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { commonStyles as styles } from \"./styles\";\nimport { WithStretchy } from \"./withStretchy\";\nvar WINDOW_HEIGHT = Dimensions.get('window').height;\n\nvar StretchyScrollView = function StretchyScrollView(_ref) {\n  var backgroundColor = _ref.backgroundColor,\n      children = _ref.children,\n      foreground = _ref.foreground,\n      imageHeight = _ref.imageHeight,\n      onScroll = _ref.onScroll,\n      stretchy = _ref.stretchy,\n      style = _ref.style,\n      otherProps = _objectWithoutProperties(_ref, [\"backgroundColor\", \"children\", \"foreground\", \"imageHeight\", \"onScroll\", \"stretchy\", \"style\"]);\n\n  var contentMinHeight = useMemo(function () {\n    return stretchy.heightBasedOnRatio ? WINDOW_HEIGHT - stretchy.heightBasedOnRatio : 0;\n  }, [stretchy.heightBasedOnRatio]);\n  return React.createElement(Animated.ScrollView, _extends({}, otherProps, {\n    style: [style, styles.contentContainer],\n    scrollEventThrottle: 1,\n    onScroll: stretchy.onScroll\n  }), React.createElement(View, {\n    style: [styles.foregroundContainer, {\n      height: imageHeight || stretchy.heightBasedOnRatio\n    }]\n  }, foreground), React.createElement(View, {\n    style: {\n      backgroundColor: backgroundColor,\n      minHeight: contentMinHeight\n    }\n  }, children));\n};\n\nexport default WithStretchy(StretchyScrollView);","map":{"version":3,"sources":["/home/cyclopz/Desktop/Cyclopz/My Personal Git/React-Native/Pokemon/node_modules/react-native-stretchy/lib/dist/components/stretchyScrollView.js"],"names":["React","useMemo","commonStyles","styles","WithStretchy","WINDOW_HEIGHT","Dimensions","get","height","StretchyScrollView","backgroundColor","children","foreground","imageHeight","onScroll","stretchy","style","otherProps","contentMinHeight","heightBasedOnRatio","createElement","Animated","ScrollView","contentContainer","scrollEventThrottle","View","foregroundContainer","minHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;;;;AAEA,SAASC,YAAY,IAAIC,MAAzB;AACA,SAASC,YAAT;AACA,IAAMC,aAAa,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAA/C;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAsG;AAAA,MAAnGC,eAAmG,QAAnGA,eAAmG;AAAA,MAAlFC,QAAkF,QAAlFA,QAAkF;AAAA,MAAxEC,UAAwE,QAAxEA,UAAwE;AAAA,MAA5DC,WAA4D,QAA5DA,WAA4D;AAAA,MAA/CC,QAA+C,QAA/CA,QAA+C;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;AAAA,MAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,MAAjBC,UAAiB;;AAC7H,MAAMC,gBAAgB,GAAGjB,OAAO,CAAC;AAAA,WAAMc,QAAQ,CAACI,kBAAT,GACjCd,aAAa,GAAGU,QAAQ,CAACI,kBADQ,GAEjC,CAF2B;AAAA,GAAD,EAEvB,CAACJ,QAAQ,CAACI,kBAAV,CAFuB,CAAhC;AAGA,SAAQnB,KAAK,CAACoB,aAAN,CAAoBC,QAAQ,CAACC,UAA7B,EAAyC,SAAc,EAAd,EAAkBL,UAAlB,EAA8B;AAAED,IAAAA,KAAK,EAAE,CAACA,KAAD,EAAQb,MAAM,CAACoB,gBAAf,CAAT;AAA2CC,IAAAA,mBAAmB,EAAE,CAAhE;AAAmEV,IAAAA,QAAQ,EAAEC,QAAQ,CAACD;AAAtF,GAA9B,CAAzC,EACJd,KAAK,CAACoB,aAAN,CAAoBK,IAApB,EAA0B;AAAET,IAAAA,KAAK,EAAE,CAC3Bb,MAAM,CAACuB,mBADoB,EAE3B;AAAElB,MAAAA,MAAM,EAAEK,WAAW,IAAIE,QAAQ,CAACI;AAAlC,KAF2B;AAAT,GAA1B,EAGSP,UAHT,CADI,EAKJZ,KAAK,CAACoB,aAAN,CAAoBK,IAApB,EAA0B;AAAET,IAAAA,KAAK,EAAE;AAC3BN,MAAAA,eAAe,EAAfA,eAD2B;AAE3BiB,MAAAA,SAAS,EAAET;AAFgB;AAAT,GAA1B,EAGSP,QAHT,CALI,CAAR;AASH,CAbD;;AAcA,eAAeP,YAAY,CAACK,kBAAD,CAA3B","sourcesContent":["import React, { useMemo } from 'react';\nimport { Animated, View, Dimensions } from 'react-native';\nimport { commonStyles as styles } from './styles';\nimport { WithStretchy, } from './withStretchy';\nconst WINDOW_HEIGHT = Dimensions.get('window').height;\nconst StretchyScrollView = ({ backgroundColor, children, foreground, imageHeight, onScroll, stretchy, style, ...otherProps }) => {\n    const contentMinHeight = useMemo(() => stretchy.heightBasedOnRatio\n        ? WINDOW_HEIGHT - stretchy.heightBasedOnRatio\n        : 0, [stretchy.heightBasedOnRatio]);\n    return (React.createElement(Animated.ScrollView, Object.assign({}, otherProps, { style: [style, styles.contentContainer], scrollEventThrottle: 1, onScroll: stretchy.onScroll }),\n        React.createElement(View, { style: [\n                styles.foregroundContainer,\n                { height: imageHeight || stretchy.heightBasedOnRatio },\n            ] }, foreground),\n        React.createElement(View, { style: {\n                backgroundColor,\n                minHeight: contentMinHeight,\n            } }, children)));\n};\nexport default WithStretchy(StretchyScrollView);\n"]},"metadata":{},"sourceType":"module"}