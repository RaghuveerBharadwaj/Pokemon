{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initialState = {\n  country: {\n    name: '',\n    capital: '',\n    population: '',\n    latlng: [],\n    flag: ''\n  },\n  weather: {\n    request: {},\n    location: {},\n    current: {}\n  }\n};\n\nvar countryReducer = function countryReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_COUNTRY\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        country: action.country,\n        weather: {}\n      });\n\n    case \"GET_WEATHER\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        weather: action.weather\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default countryReducer;","map":{"version":3,"sources":["/home/cyclopz/Desktop/Cyclopz/My Personal Git/React-Native/Pokemon/redux/reducers/countryReducer.ts"],"names":["initialState","country","name","capital","population","latlng","flag","weather","request","location","current","countryReducer","state","action","type"],"mappings":";;;;;;AAAA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,EADC;AAEPC,IAAAA,OAAO,EAAE,EAFF;AAGPC,IAAAA,UAAU,EAAE,EAHL;AAIPC,IAAAA,MAAM,EAAE,EAJD;AAKPC,IAAAA,IAAI,EAAE;AALC,GADU;AAQnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,EADF;AAEPC,IAAAA,QAAQ,EAAE,EAFH;AAGPC,IAAAA,OAAO,EAAE;AAHF;AARU,CAArB;;AAeA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAuC;AAAA,MAAtCC,KAAsC,uEAA9BZ,YAA8B;AAAA,MAAhBa,MAAgB;;AAC5D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,6CACKF,KADL;AAEEX,QAAAA,OAAO,EAAEY,MAAM,CAACZ,OAFlB;AAGEM,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAK,aAAL;AACE,6CACKK,KADL;AAEEL,QAAAA,OAAO,EAAEM,MAAM,CAACN;AAFlB;;AAIF;AACE,+BACKK,KADL;AAbJ;AAiBD,CAlBD;;AAoBA,eAAeD,cAAf","sourcesContent":["const initialState = {\n  country: {\n    name: '',\n    capital: '', \n    population: '',\n    latlng: [],\n    flag: ''\n  },\n  weather: {\n    request: {},\n    location: {},\n    current: {}\n  }\n}\n\nconst countryReducer = (state = initialState, action: any) => {\n  switch (action.type) {\n    case \"GET_COUNTRY\": \n      return {\n        ...state,\n        country: action.country,\n        weather: {}\n      }\n    case \"GET_WEATHER\": \n      return {\n        ...state,\n        weather: action.weather\n      }\n    default: \n      return {\n        ...state\n      }\n  }\n}\n\nexport default countryReducer\n"]},"metadata":{},"sourceType":"module"}