{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/cyclopz/Desktop/Cyclopz/My Personal Git/React-Native/Pokemon/views/DishDetail.tsx\";\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { connect } from 'react-redux';\nimport { ScrollView } from 'react-native-gesture-handler';\n\nvar DishDetail = function DishDetail(props) {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  return React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.detail.Images[0].image\n    },\n    style: {\n      height: Dimensions.get('screen').height / (open ? 2 : 4)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }), React.createElement(Image, {\n    source: {\n      uri: props.detail.Images[0].image\n    },\n    style: {\n      height: Dimensions.get('screen').height / (open ? 2 : 4)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), React.createElement(Image, {\n    source: {\n      uri: props.detail.Images[0].image\n    },\n    style: {\n      height: Dimensions.get('screen').height / (open ? 2 : 4)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    detail: state.dish.detail\n  };\n};\n\nexport default connect(mapStateToProps)(DishDetail);","map":{"version":3,"sources":["/home/cyclopz/Desktop/Cyclopz/My Personal Git/React-Native/Pokemon/views/DishDetail.tsx"],"names":["React","connect","ScrollView","DishDetail","props","useState","open","setOpen","uri","detail","Images","image","height","Dimensions","get","mapStateToProps","state","dish"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAT,QAA2B,8BAA3B;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAkB;AAAA,wBACXJ,KAAK,CAACK,QAAN,CAAe,IAAf,CADW;AAAA;AAAA,MAC5BC,IAD4B;AAAA,MACtBC,OADsB;;AAEnC,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAE;AAAEC,MAAAA,GAAG,EAAEJ,KAAK,CAACK,MAAN,CAAaC,MAAb,CAAoB,CAApB,EAAuBC;AAA9B,KADV;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,MAAzB,IAAmCN,IAAI,GAAG,CAAH,GAAO,CAA9C;AAAV,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAKE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAE;AAAEE,MAAAA,GAAG,EAAEJ,KAAK,CAACK,MAAN,CAAaC,MAAb,CAAoB,CAApB,EAAuBC;AAA9B,KADV;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,MAAzB,IAAmCN,IAAI,GAAG,CAAH,GAAO,CAA9C;AAAV,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EASE,oBAAC,KAAD;AACE,IAAA,MAAM,EAAE;AAAEE,MAAAA,GAAG,EAAEJ,KAAK,CAACK,MAAN,CAAaC,MAAb,CAAoB,CAApB,EAAuBC;AAA9B,KADV;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,MAAzB,IAAmCN,IAAI,GAAG,CAAH,GAAO,CAA9C;AAAV,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAgBD,CAlBD;;AAoBA,IAAMS,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAgB;AACtC,SAAO;AACLP,IAAAA,MAAM,EAAEO,KAAK,CAACC,IAAN,CAAWR;AADd,GAAP;AAGD,CAJD;;AAMA,eAAeR,OAAO,CAACc,eAAD,CAAP,CAAyBZ,UAAzB,CAAf","sourcesContent":["import React from 'react'\nimport { Image, Dimensions } from 'react-native'\nimport { connect } from 'react-redux'\nimport Swipeable from 'react-native-gesture-handler/Swipeable'\nimport { ScrollView } from 'react-native-gesture-handler'\n\ntype Props = {\n  detail: any\n}\n\nconst DishDetail = (props: Props) => {\n  const [open, setOpen] = React.useState(true)\n  return (\n    <ScrollView>\n      <Image\n        source={{ uri: props.detail.Images[0].image }}\n        style={{ height: Dimensions.get('screen').height / (open ? 2 : 4) }}\n      />\n      <Image\n        source={{ uri: props.detail.Images[0].image }}\n        style={{ height: Dimensions.get('screen').height / (open ? 2 : 4) }}\n      />\n      <Image\n        source={{ uri: props.detail.Images[0].image }}\n        style={{ height: Dimensions.get('screen').height / (open ? 2 : 4) }}\n      />\n    </ScrollView>\n  )\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    detail: state.dish.detail\n  }\n}\n\nexport default connect(mapStateToProps)(DishDetail)\n"]},"metadata":{},"sourceType":"module"}