{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\n\nvar getPokemons = function getPokemons(limit) {\n  return function (dispatch) {\n    return axios.get(\"https://pokeapi.co/api/v2/pokemon?offset=0&limit=\" + limit).then(function _callee2(res) {\n      var pokemons;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Promise.all(res.data.results.map(function _callee(poke) {\n                return _regeneratorRuntime.async(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return _regeneratorRuntime.awrap(getPokemon(poke.url));\n\n                      case 2:\n                        return _context.abrupt(\"return\", _context.sent);\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, null, null, null, Promise);\n              })));\n\n            case 2:\n              pokemons = _context2.sent;\n              console.log(pokemons);\n              dispatch({\n                type: \"GET_POKEMONS\",\n                pokemons: pokemons\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }).catch(function (err) {\n      if (err.response) {\n        alert(err.response.data.message);\n      }\n    });\n  };\n};\n\nvar getPokemon = function getPokemon(url) {\n  return axios.get(url).then(function (res) {\n    return {\n      name: res.data.name,\n      url: res.data.sprites._default\n    };\n  }).catch(function (err) {\n    if (err.response) {\n      alert(err.response.data.message);\n    }\n  });\n};\n\nexport { getPokemons, getPokemon };","map":{"version":3,"sources":["/home/cyclopz/Desktop/Cyclopz/My Personal Git/React-Native/Pokemon/redux/actions/pokeActions.ts"],"names":["axios","getPokemons","limit","dispatch","get","then","res","Promise","all","data","results","map","poke","getPokemon","url","pokemons","console","log","type","catch","err","response","alert","message","name","sprites","_default"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SAAmB,UAACC,QAAD,EAAwB;AAC7D,WACEH,KAAK,CACFI,GADH,uDAC2DF,KAD3D,EAEGG,IAFH,CAEQ,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACmBC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqB,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAA2BC,UAAU,CAACD,IAAI,CAACE,GAAN,CAArC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAArB,CAAZ,CADnB;;AAAA;AACEC,cAAAA,QADF;AAEJC,cAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAZ,cAAAA,QAAQ,CAAC;AACPe,gBAAAA,IAAI,EAAE,cADC;AAEPH,gBAAAA,QAAQ,EAAEA;AAFH,eAAD,CAAR;;AAHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFR,EAUGI,KAVH,CAUS,UAACC,GAAD,EAAc;AACnB,UAAIA,GAAG,CAACC,QAAR,EAAkB;AAChBC,QAAAA,KAAK,CAACF,GAAG,CAACC,QAAJ,CAAaZ,IAAb,CAAkBc,OAAnB,CAAL;AACD;AACF,KAdH,CADF;AAiBD,GAlBmB;AAAA,CAApB;;AAoBA,IAAMV,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAiB;AAClC,SACEd,KAAK,CACFI,GADH,CACOU,GADP,EAEGT,IAFH,CAEQ,UAACC,GAAD,EAAc;AAClB,WAAO;AACLkB,MAAAA,IAAI,EAAElB,GAAG,CAACG,IAAJ,CAASe,IADV;AAELV,MAAAA,GAAG,EAAER,GAAG,CAACG,IAAJ,CAASgB,OAAT,CAAiBC;AAFjB,KAAP;AAID,GAPH,EAQGP,KARH,CAQS,UAACC,GAAD,EAAc;AACnB,QAAIA,GAAG,CAACC,QAAR,EAAkB;AAChBC,MAAAA,KAAK,CAACF,GAAG,CAACC,QAAJ,CAAaZ,IAAb,CAAkBc,OAAnB,CAAL;AACD;AACF,GAZH,CADF;AAeD,CAhBD;;AAkBA,SAAStB,WAAT,EAAsBY,UAAtB","sourcesContent":["import axios from 'axios'\nimport { Dispatch } from 'redux'\n\nconst getPokemons = (limit: number) => (dispatch: Dispatch) => {\n  return (\n    axios\n      .get(`https://pokeapi.co/api/v2/pokemon?offset=0&limit=${limit}`)\n      .then(async (res: any) => {\n        const pokemons = await Promise.all(res.data.results.map(async (poke: any) => await getPokemon(poke.url)))\n        console.log(pokemons)\n        dispatch({\n          type: \"GET_POKEMONS\",\n          pokemons: pokemons\n        })\n      })\n      .catch((err: any) => {\n        if (err.response) {\n          alert(err.response.data.message)\n        }\n      })\n  )\n}\n\nconst getPokemon = (url: string) => {\n  return (\n    axios\n      .get(url)\n      .then((res: any) => {\n        return {\n          name: res.data.name,\n          url: res.data.sprites._default\n        }\n      })\n      .catch((err: any) => {\n        if (err.response) {\n          alert(err.response.data.message)\n        }\n      })\n  )\n}\n\nexport { getPokemons, getPokemon }"]},"metadata":{},"sourceType":"module"}