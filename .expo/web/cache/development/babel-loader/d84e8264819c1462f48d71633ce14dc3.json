{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState, useMemo } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar WINDOW_WIDTH = Dimensions.get('window').width;\nexport var useImageHeightBasedOnRatio = function useImageHeightBasedOnRatio(image) {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      ratio = _useState2[0],\n      setRatio = _useState2[1];\n\n  var imageHeightBasedOnRatio = useMemo(function () {\n    return ratio > 1 ? WINDOW_WIDTH / ratio : WINDOW_WIDTH * ratio;\n  }, [ratio]);\n  useEffect(function () {\n    if (image) {\n      var imageUri = image.uri;\n\n      if (imageUri) {\n        Image.getSize(imageUri, function (width, height) {\n          setRatio(width / height);\n        }, function () {\n          return null;\n        });\n      } else {\n        var _Image$resolveAssetSo = Image.resolveAssetSource(image),\n            width = _Image$resolveAssetSo.width,\n            height = _Image$resolveAssetSo.height;\n\n        setRatio(width / height);\n      }\n    }\n  }, [image]);\n  return imageHeightBasedOnRatio;\n};","map":{"version":3,"sources":["/home/cyclopz/Desktop/Cyclopz/My Personal Git/React-Native/Pokemon/node_modules/react-native-stretchy/lib/dist/hooks/useImageHeightBasedOnRatio.js"],"names":["useEffect","useState","useMemo","WINDOW_WIDTH","Dimensions","get","width","useImageHeightBasedOnRatio","image","ratio","setRatio","imageHeightBasedOnRatio","imageUri","uri","Image","getSize","height","resolveAssetSource"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,OAA7C;;;AAEA,IAAMC,YAAY,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA9C;AACA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,KAAD,EAAW;AAAA,kBACvBP,QAAQ,CAAC,CAAD,CADe;AAAA;AAAA,MAC1CQ,KAD0C;AAAA,MACnCC,QADmC;;AAEjD,MAAMC,uBAAuB,GAAGT,OAAO,CAAC;AAAA,WAAOO,KAAK,GAAG,CAAR,GAAYN,YAAY,GAAGM,KAA3B,GAAmCN,YAAY,GAAGM,KAAzD;AAAA,GAAD,EAAkE,CAACA,KAAD,CAAlE,CAAvC;AACAT,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIQ,KAAJ,EAAW;AACP,UAAMI,QAAQ,GAAGJ,KAAK,CAACK,GAAvB;;AACA,UAAID,QAAJ,EAAc;AACVE,QAAAA,KAAK,CAACC,OAAN,CAAcH,QAAd,EAAwB,UAACN,KAAD,EAAQU,MAAR,EAAmB;AACvCN,UAAAA,QAAQ,CAACJ,KAAK,GAAGU,MAAT,CAAR;AACH,SAFD,EAEG;AAAA,iBAAM,IAAN;AAAA,SAFH;AAGH,OAJD,MAKK;AAAA,oCACyBF,KAAK,CAACG,kBAAN,CAAyBT,KAAzB,CADzB;AAAA,YACOF,KADP,yBACOA,KADP;AAAA,YACcU,MADd,yBACcA,MADd;;AAEDN,QAAAA,QAAQ,CAACJ,KAAK,GAAGU,MAAT,CAAR;AACH;AACJ;AACJ,GAbQ,EAaN,CAACR,KAAD,CAbM,CAAT;AAcA,SAAOG,uBAAP;AACH,CAlBM","sourcesContent":["import { useEffect, useState, useMemo } from 'react';\nimport { Image, Dimensions } from 'react-native';\nconst WINDOW_WIDTH = Dimensions.get('window').width;\nexport const useImageHeightBasedOnRatio = (image) => {\n    const [ratio, setRatio] = useState(0);\n    const imageHeightBasedOnRatio = useMemo(() => (ratio > 1 ? WINDOW_WIDTH / ratio : WINDOW_WIDTH * ratio), [ratio]);\n    useEffect(() => {\n        if (image) {\n            const imageUri = image.uri;\n            if (imageUri) {\n                Image.getSize(imageUri, (width, height) => {\n                    setRatio(width / height);\n                }, () => null);\n            }\n            else {\n                const { width, height } = Image.resolveAssetSource(image);\n                setRatio(width / height);\n            }\n        }\n    }, [image]);\n    return imageHeightBasedOnRatio;\n};\n"]},"metadata":{},"sourceType":"module"}